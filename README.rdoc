ecore is a content repository implementation in ruby. It's main purpose 
is to replace RubyOnRails' ActiveRecord mysql mapper in favor of a pseudo 
hierarchical structure stored in xml files.

It's dependencies are <tt>nokogiri</tt>, <tt>activesupport</tt> and <tt>activemodel</tt>
(both are just used for ActiveRecord compatibility.

ecore can be used just like ActiveRecord::Base

example:

  MyTask < Ecore::Node
    string  :name, :required => true # the name attribute is already defined in Ecore::Node
    string  :note, :required => true
    boolean :status
    
    before :create, lambda{ status = 'open' }
    after :save, :do_something_else
  end

In order to work with nodes, you need an valid session

  session = Ecore::Session.new(:name => 'myname', :password => 'mypassword')
  
Now, you can create a node by (active_record like syntax):

  mytask = MyTask.new(:name => 'call john', :note => '02 36 092 02')
  puts "saved." if mynode.save(session)
  
or

  mynode = Ecore::Node.create(session, :name => 'plain node for john')

You can lookup the task by either looking up within "MyTask"-scope:

  MyTask.find(session, :name.contains => 'john')
  
According to the above examples, this will only return mytask node named 
'call john'.

By using the Ecore::Node lookup scope, you will find any node type matching the
filter:

  Ecore::Node.find(session, :name.contains => 'john')
  
This shoud also return 'plain node for john'

You can update a node by well-rails-known update_attributes method:

  Ecore::Node.find(session, :id => params[:id]).update_attributes(params[:mytask])
  
For more details, refer to the rdoc.

==== Concept

There are a couple of use cases, where you need not only a hierarchical tree 
structure, but also a flexibility of relations between nodes of a tree, let's say
a web page "Michael", a subpage of "Contacts" also should be shown up in "project members",
a subpage of "projects". ecore deals with such use cases with it's label-concept.

You can add a label to "Michael", the primary label is "contacts", another label is
"project members". Label stands for the actual node, the current node should be labeled
with.

The classic hierarchical structure is still present through the primary_label method. It
is the node's first label and has it's own setter/getter.

To decrease the amount of xml-parsings per page call, there are several cachers which will hold
subnodes, nodes and associated nodes.

===== Nodes association

You can associate nodes very similar to the relational mapper concept of ActiveRecord, via
defining :has_labels and look them (and only nodes of that type) up.

  
==== What ecore can and what it can't

ecore uses xml files and manages them via nokogiri. Therefore, it's performance will
decrease the larger the files get. If you plan to store millions of nodes, ecore will
most likely NOT be your choice.

You can benefit from an almost fully implemented content repository which 
is 100% compatible with ActiveRecord,
implements access handling (you won't get a node, if you don't have access on it)
can keep and restore deleted nodes
is compatible with JRuby (via nokogiri-java)
can subclass nodes (multiple times) which will inherit the predecessor's attributes
can label nodes with other nodes (this causes a pseudo hierarchical behavior
audits any changes
 
== Installation

Download this package and run:

  gem build ecore.gemspec

  gem install ecore
  
from the directory where you downloaded ecore to.

== Using ecore in Rails

In your application init code add:

  Ecore::Repository.new :repos_path => 'db/repos'
  
Additional options, like :logfile, :loglevel can be given.
  
=== Datatypes

Only attributes defined via their datatype identifier will be stored to 
the content repository (as ActiveRecord is doing with db migrations)

available datatypes are <tt>string, integer, float, boolean, time</tt>

datatypes will be converted from strings (e.g. when passed from a form) back to those datatypes.

=== Labeling and Hierarchy

Ecore has a label implementation, which allows nodes to be associated with other nodes. To keep
compatitibility to a B-Tree Hierarchy, the primary label is the direct parent (in B-Tree structure).
In ecore, other labels can be used, to link the node to other (parent) nodes, which in turn will
list that node as it's subnode

  node.add_label( parent_node )
  node.save

links node to parent_node.

  parent_node.subnodes
  
will return an array containing node as parent_node's subnode

  node.labels
  or
  node.primary_label
  
will return parent_node as node's parent

=== Permissions

A node stores permissions and will lookup group, everybody, anybody or label permissions until anything matches

==== Sharing / Unsharing a node with a user

  node.share( user, 'rw' )
  node.save
  
shares a node with the given user

  node.unshare( user )
  node.save
  
unshares the node

==== Effective ACL

to see the current node's effective acls, a user can call the <tt>effective_acl</tt> method

  node.effective_acl[user.id]
  
will return ACE (Access Control Entry) for given user (if any)

  node.can_write?(user)
  
will return true/false if given user has write access on the current node

If you call .can_read?, .can_write?, .can_share?, .can_delete? method without passing a user,
the privileges for the current node holder will be returned
  

=== Hooks

  MyNode < Ecore::Node
    before :create, :before_create_action
  end
  
  MyNode < Ecore::Node
    before :save do
      # things to do before save
    end
  end

==== bugs, features, patches

please feel free to contact me at quaqua@tastenwerk.com
